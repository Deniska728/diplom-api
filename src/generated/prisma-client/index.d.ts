// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  gqlSchema: (where?: GqlSchemaWhereInput) => Promise<boolean>;
  gqlSchemaVersion: (where?: GqlSchemaVersionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userProfile: (where?: UserProfileWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  gqlSchema: (where: GqlSchemaWhereUniqueInput) => GqlSchemaNullablePromise;
  gqlSchemas: (args?: {
    where?: GqlSchemaWhereInput;
    orderBy?: GqlSchemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GqlSchema>;
  gqlSchemasConnection: (args?: {
    where?: GqlSchemaWhereInput;
    orderBy?: GqlSchemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GqlSchemaConnectionPromise;
  gqlSchemaVersion: (
    where: GqlSchemaVersionWhereUniqueInput
  ) => GqlSchemaVersionNullablePromise;
  gqlSchemaVersions: (args?: {
    where?: GqlSchemaVersionWhereInput;
    orderBy?: GqlSchemaVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GqlSchemaVersion>;
  gqlSchemaVersionsConnection: (args?: {
    where?: GqlSchemaVersionWhereInput;
    orderBy?: GqlSchemaVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GqlSchemaVersionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userProfile: (
    where: UserProfileWhereUniqueInput
  ) => UserProfileNullablePromise;
  userProfiles: (args?: {
    where?: UserProfileWhereInput;
    orderBy?: UserProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserProfile>;
  userProfilesConnection: (args?: {
    where?: UserProfileWhereInput;
    orderBy?: UserProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserProfileConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGqlSchema: (data: GqlSchemaCreateInput) => GqlSchemaPromise;
  updateGqlSchema: (args: {
    data: GqlSchemaUpdateInput;
    where: GqlSchemaWhereUniqueInput;
  }) => GqlSchemaPromise;
  updateManyGqlSchemas: (args: {
    data: GqlSchemaUpdateManyMutationInput;
    where?: GqlSchemaWhereInput;
  }) => BatchPayloadPromise;
  upsertGqlSchema: (args: {
    where: GqlSchemaWhereUniqueInput;
    create: GqlSchemaCreateInput;
    update: GqlSchemaUpdateInput;
  }) => GqlSchemaPromise;
  deleteGqlSchema: (where: GqlSchemaWhereUniqueInput) => GqlSchemaPromise;
  deleteManyGqlSchemas: (where?: GqlSchemaWhereInput) => BatchPayloadPromise;
  createGqlSchemaVersion: (
    data: GqlSchemaVersionCreateInput
  ) => GqlSchemaVersionPromise;
  updateGqlSchemaVersion: (args: {
    data: GqlSchemaVersionUpdateInput;
    where: GqlSchemaVersionWhereUniqueInput;
  }) => GqlSchemaVersionPromise;
  updateManyGqlSchemaVersions: (args: {
    data: GqlSchemaVersionUpdateManyMutationInput;
    where?: GqlSchemaVersionWhereInput;
  }) => BatchPayloadPromise;
  upsertGqlSchemaVersion: (args: {
    where: GqlSchemaVersionWhereUniqueInput;
    create: GqlSchemaVersionCreateInput;
    update: GqlSchemaVersionUpdateInput;
  }) => GqlSchemaVersionPromise;
  deleteGqlSchemaVersion: (
    where: GqlSchemaVersionWhereUniqueInput
  ) => GqlSchemaVersionPromise;
  deleteManyGqlSchemaVersions: (
    where?: GqlSchemaVersionWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserProfile: (data: UserProfileCreateInput) => UserProfilePromise;
  updateUserProfile: (args: {
    data: UserProfileUpdateInput;
    where: UserProfileWhereUniqueInput;
  }) => UserProfilePromise;
  updateManyUserProfiles: (args: {
    data: UserProfileUpdateManyMutationInput;
    where?: UserProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertUserProfile: (args: {
    where: UserProfileWhereUniqueInput;
    create: UserProfileCreateInput;
    update: UserProfileUpdateInput;
  }) => UserProfilePromise;
  deleteUserProfile: (where: UserProfileWhereUniqueInput) => UserProfilePromise;
  deleteManyUserProfiles: (
    where?: UserProfileWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  gqlSchema: (
    where?: GqlSchemaSubscriptionWhereInput
  ) => GqlSchemaSubscriptionPayloadSubscription;
  gqlSchemaVersion: (
    where?: GqlSchemaVersionSubscriptionWhereInput
  ) => GqlSchemaVersionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userProfile: (
    where?: UserProfileSubscriptionWhereInput
  ) => UserProfileSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GqlSchemaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "apiKey_ASC"
  | "apiKey_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sub_ASC"
  | "sub_DESC"
  | "email_ASC"
  | "email_DESC"
  | "username_ASC"
  | "username_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GqlSchemaVersionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "number_ASC"
  | "number_DESC"
  | "introspectionQuery_ASC"
  | "introspectionQuery_DESC"
  | "endpointUrl_ASC"
  | "endpointUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "picture_ASC"
  | "picture_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GqlSchemaWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GqlSchemaWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  owner?: Maybe<UserWhereInput>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  latestVersion?: Maybe<GqlSchemaVersionWhereInput>;
  versions_every?: Maybe<GqlSchemaVersionWhereInput>;
  versions_some?: Maybe<GqlSchemaVersionWhereInput>;
  versions_none?: Maybe<GqlSchemaVersionWhereInput>;
  apiKey?: Maybe<String>;
  apiKey_not?: Maybe<String>;
  apiKey_in?: Maybe<String[] | String>;
  apiKey_not_in?: Maybe<String[] | String>;
  apiKey_lt?: Maybe<String>;
  apiKey_lte?: Maybe<String>;
  apiKey_gt?: Maybe<String>;
  apiKey_gte?: Maybe<String>;
  apiKey_contains?: Maybe<String>;
  apiKey_not_contains?: Maybe<String>;
  apiKey_starts_with?: Maybe<String>;
  apiKey_not_starts_with?: Maybe<String>;
  apiKey_ends_with?: Maybe<String>;
  apiKey_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GqlSchemaWhereInput[] | GqlSchemaWhereInput>;
  OR?: Maybe<GqlSchemaWhereInput[] | GqlSchemaWhereInput>;
  NOT?: Maybe<GqlSchemaWhereInput[] | GqlSchemaWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sub?: Maybe<String>;
  sub_not?: Maybe<String>;
  sub_in?: Maybe<String[] | String>;
  sub_not_in?: Maybe<String[] | String>;
  sub_lt?: Maybe<String>;
  sub_lte?: Maybe<String>;
  sub_gt?: Maybe<String>;
  sub_gte?: Maybe<String>;
  sub_contains?: Maybe<String>;
  sub_not_contains?: Maybe<String>;
  sub_starts_with?: Maybe<String>;
  sub_not_starts_with?: Maybe<String>;
  sub_ends_with?: Maybe<String>;
  sub_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  profile?: Maybe<UserProfileWhereInput>;
  schemas_every?: Maybe<GqlSchemaWhereInput>;
  schemas_some?: Maybe<GqlSchemaWhereInput>;
  schemas_none?: Maybe<GqlSchemaWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  fullName?: Maybe<String>;
  fullName_not?: Maybe<String>;
  fullName_in?: Maybe<String[] | String>;
  fullName_not_in?: Maybe<String[] | String>;
  fullName_lt?: Maybe<String>;
  fullName_lte?: Maybe<String>;
  fullName_gt?: Maybe<String>;
  fullName_gte?: Maybe<String>;
  fullName_contains?: Maybe<String>;
  fullName_not_contains?: Maybe<String>;
  fullName_starts_with?: Maybe<String>;
  fullName_not_starts_with?: Maybe<String>;
  fullName_ends_with?: Maybe<String>;
  fullName_not_ends_with?: Maybe<String>;
  picture?: Maybe<String>;
  picture_not?: Maybe<String>;
  picture_in?: Maybe<String[] | String>;
  picture_not_in?: Maybe<String[] | String>;
  picture_lt?: Maybe<String>;
  picture_lte?: Maybe<String>;
  picture_gt?: Maybe<String>;
  picture_gte?: Maybe<String>;
  picture_contains?: Maybe<String>;
  picture_not_contains?: Maybe<String>;
  picture_starts_with?: Maybe<String>;
  picture_not_starts_with?: Maybe<String>;
  picture_ends_with?: Maybe<String>;
  picture_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserProfileWhereInput[] | UserProfileWhereInput>;
  OR?: Maybe<UserProfileWhereInput[] | UserProfileWhereInput>;
  NOT?: Maybe<UserProfileWhereInput[] | UserProfileWhereInput>;
}

export interface GqlSchemaVersionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  schema?: Maybe<GqlSchemaWhereInput>;
  endpointUrl?: Maybe<String>;
  endpointUrl_not?: Maybe<String>;
  endpointUrl_in?: Maybe<String[] | String>;
  endpointUrl_not_in?: Maybe<String[] | String>;
  endpointUrl_lt?: Maybe<String>;
  endpointUrl_lte?: Maybe<String>;
  endpointUrl_gt?: Maybe<String>;
  endpointUrl_gte?: Maybe<String>;
  endpointUrl_contains?: Maybe<String>;
  endpointUrl_not_contains?: Maybe<String>;
  endpointUrl_starts_with?: Maybe<String>;
  endpointUrl_not_starts_with?: Maybe<String>;
  endpointUrl_ends_with?: Maybe<String>;
  endpointUrl_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GqlSchemaVersionWhereInput[] | GqlSchemaVersionWhereInput>;
  OR?: Maybe<GqlSchemaVersionWhereInput[] | GqlSchemaVersionWhereInput>;
  NOT?: Maybe<GqlSchemaVersionWhereInput[] | GqlSchemaVersionWhereInput>;
}

export type GqlSchemaVersionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  sub?: Maybe<String>;
}>;

export type UserProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GqlSchemaCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  owner?: Maybe<UserCreateOneInput>;
  members?: Maybe<UserCreateManyWithoutSchemasInput>;
  latestVersion?: Maybe<GqlSchemaVersionCreateOneInput>;
  versions?: Maybe<GqlSchemaVersionCreateManyWithoutSchemaInput>;
  apiKey: String;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  sub: String;
  email: String;
  username: String;
  profile?: Maybe<UserProfileCreateOneInput>;
  schemas?: Maybe<GqlSchemaCreateManyWithoutMembersInput>;
}

export interface UserProfileCreateOneInput {
  create?: Maybe<UserProfileCreateInput>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserProfileCreateInput {
  id?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  fullName?: Maybe<String>;
  picture?: Maybe<String>;
}

export interface GqlSchemaCreateManyWithoutMembersInput {
  create?: Maybe<
    GqlSchemaCreateWithoutMembersInput[] | GqlSchemaCreateWithoutMembersInput
  >;
  connect?: Maybe<GqlSchemaWhereUniqueInput[] | GqlSchemaWhereUniqueInput>;
}

export interface GqlSchemaCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
  owner?: Maybe<UserCreateOneInput>;
  latestVersion?: Maybe<GqlSchemaVersionCreateOneInput>;
  versions?: Maybe<GqlSchemaVersionCreateManyWithoutSchemaInput>;
  apiKey: String;
}

export interface GqlSchemaVersionCreateOneInput {
  create?: Maybe<GqlSchemaVersionCreateInput>;
  connect?: Maybe<GqlSchemaVersionWhereUniqueInput>;
}

export interface GqlSchemaVersionCreateInput {
  id?: Maybe<ID_Input>;
  number: Int;
  schema?: Maybe<GqlSchemaCreateOneWithoutVersionsInput>;
  introspectionQuery?: Maybe<Json>;
  endpointUrl?: Maybe<String>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface GqlSchemaCreateOneWithoutVersionsInput {
  create?: Maybe<GqlSchemaCreateWithoutVersionsInput>;
  connect?: Maybe<GqlSchemaWhereUniqueInput>;
}

export interface GqlSchemaCreateWithoutVersionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  owner?: Maybe<UserCreateOneInput>;
  members?: Maybe<UserCreateManyWithoutSchemasInput>;
  latestVersion?: Maybe<GqlSchemaVersionCreateOneInput>;
  apiKey: String;
}

export interface UserCreateManyWithoutSchemasInput {
  create?: Maybe<
    UserCreateWithoutSchemasInput[] | UserCreateWithoutSchemasInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutSchemasInput {
  id?: Maybe<ID_Input>;
  sub: String;
  email: String;
  username: String;
  profile?: Maybe<UserProfileCreateOneInput>;
}

export interface GqlSchemaVersionCreateManyWithoutSchemaInput {
  create?: Maybe<
    | GqlSchemaVersionCreateWithoutSchemaInput[]
    | GqlSchemaVersionCreateWithoutSchemaInput
  >;
  connect?: Maybe<
    GqlSchemaVersionWhereUniqueInput[] | GqlSchemaVersionWhereUniqueInput
  >;
}

export interface GqlSchemaVersionCreateWithoutSchemaInput {
  id?: Maybe<ID_Input>;
  number: Int;
  introspectionQuery?: Maybe<Json>;
  endpointUrl?: Maybe<String>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface GqlSchemaUpdateInput {
  name?: Maybe<String>;
  owner?: Maybe<UserUpdateOneInput>;
  members?: Maybe<UserUpdateManyWithoutSchemasInput>;
  latestVersion?: Maybe<GqlSchemaVersionUpdateOneInput>;
  versions?: Maybe<GqlSchemaVersionUpdateManyWithoutSchemaInput>;
  apiKey?: Maybe<String>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  sub?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  profile?: Maybe<UserProfileUpdateOneInput>;
  schemas?: Maybe<GqlSchemaUpdateManyWithoutMembersInput>;
}

export interface UserProfileUpdateOneInput {
  create?: Maybe<UserProfileCreateInput>;
  update?: Maybe<UserProfileUpdateDataInput>;
  upsert?: Maybe<UserProfileUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserProfileUpdateDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  fullName?: Maybe<String>;
  picture?: Maybe<String>;
}

export interface UserProfileUpsertNestedInput {
  update: UserProfileUpdateDataInput;
  create: UserProfileCreateInput;
}

export interface GqlSchemaUpdateManyWithoutMembersInput {
  create?: Maybe<
    GqlSchemaCreateWithoutMembersInput[] | GqlSchemaCreateWithoutMembersInput
  >;
  delete?: Maybe<GqlSchemaWhereUniqueInput[] | GqlSchemaWhereUniqueInput>;
  connect?: Maybe<GqlSchemaWhereUniqueInput[] | GqlSchemaWhereUniqueInput>;
  set?: Maybe<GqlSchemaWhereUniqueInput[] | GqlSchemaWhereUniqueInput>;
  disconnect?: Maybe<GqlSchemaWhereUniqueInput[] | GqlSchemaWhereUniqueInput>;
  update?: Maybe<
    | GqlSchemaUpdateWithWhereUniqueWithoutMembersInput[]
    | GqlSchemaUpdateWithWhereUniqueWithoutMembersInput
  >;
  upsert?: Maybe<
    | GqlSchemaUpsertWithWhereUniqueWithoutMembersInput[]
    | GqlSchemaUpsertWithWhereUniqueWithoutMembersInput
  >;
  deleteMany?: Maybe<GqlSchemaScalarWhereInput[] | GqlSchemaScalarWhereInput>;
  updateMany?: Maybe<
    | GqlSchemaUpdateManyWithWhereNestedInput[]
    | GqlSchemaUpdateManyWithWhereNestedInput
  >;
}

export interface GqlSchemaUpdateWithWhereUniqueWithoutMembersInput {
  where: GqlSchemaWhereUniqueInput;
  data: GqlSchemaUpdateWithoutMembersDataInput;
}

export interface GqlSchemaUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
  owner?: Maybe<UserUpdateOneInput>;
  latestVersion?: Maybe<GqlSchemaVersionUpdateOneInput>;
  versions?: Maybe<GqlSchemaVersionUpdateManyWithoutSchemaInput>;
  apiKey?: Maybe<String>;
}

export interface GqlSchemaVersionUpdateOneInput {
  create?: Maybe<GqlSchemaVersionCreateInput>;
  update?: Maybe<GqlSchemaVersionUpdateDataInput>;
  upsert?: Maybe<GqlSchemaVersionUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GqlSchemaVersionWhereUniqueInput>;
}

export interface GqlSchemaVersionUpdateDataInput {
  number?: Maybe<Int>;
  schema?: Maybe<GqlSchemaUpdateOneWithoutVersionsInput>;
  introspectionQuery?: Maybe<Json>;
  endpointUrl?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface GqlSchemaUpdateOneWithoutVersionsInput {
  create?: Maybe<GqlSchemaCreateWithoutVersionsInput>;
  update?: Maybe<GqlSchemaUpdateWithoutVersionsDataInput>;
  upsert?: Maybe<GqlSchemaUpsertWithoutVersionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GqlSchemaWhereUniqueInput>;
}

export interface GqlSchemaUpdateWithoutVersionsDataInput {
  name?: Maybe<String>;
  owner?: Maybe<UserUpdateOneInput>;
  members?: Maybe<UserUpdateManyWithoutSchemasInput>;
  latestVersion?: Maybe<GqlSchemaVersionUpdateOneInput>;
  apiKey?: Maybe<String>;
}

export interface UserUpdateManyWithoutSchemasInput {
  create?: Maybe<
    UserCreateWithoutSchemasInput[] | UserCreateWithoutSchemasInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutSchemasInput[]
    | UserUpdateWithWhereUniqueWithoutSchemasInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutSchemasInput[]
    | UserUpsertWithWhereUniqueWithoutSchemasInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutSchemasInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSchemasDataInput;
}

export interface UserUpdateWithoutSchemasDataInput {
  sub?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  profile?: Maybe<UserProfileUpdateOneInput>;
}

export interface UserUpsertWithWhereUniqueWithoutSchemasInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSchemasDataInput;
  create: UserCreateWithoutSchemasInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sub?: Maybe<String>;
  sub_not?: Maybe<String>;
  sub_in?: Maybe<String[] | String>;
  sub_not_in?: Maybe<String[] | String>;
  sub_lt?: Maybe<String>;
  sub_lte?: Maybe<String>;
  sub_gt?: Maybe<String>;
  sub_gte?: Maybe<String>;
  sub_contains?: Maybe<String>;
  sub_not_contains?: Maybe<String>;
  sub_starts_with?: Maybe<String>;
  sub_not_starts_with?: Maybe<String>;
  sub_ends_with?: Maybe<String>;
  sub_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  sub?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
}

export interface GqlSchemaUpsertWithoutVersionsInput {
  update: GqlSchemaUpdateWithoutVersionsDataInput;
  create: GqlSchemaCreateWithoutVersionsInput;
}

export interface GqlSchemaVersionUpsertNestedInput {
  update: GqlSchemaVersionUpdateDataInput;
  create: GqlSchemaVersionCreateInput;
}

export interface GqlSchemaVersionUpdateManyWithoutSchemaInput {
  create?: Maybe<
    | GqlSchemaVersionCreateWithoutSchemaInput[]
    | GqlSchemaVersionCreateWithoutSchemaInput
  >;
  delete?: Maybe<
    GqlSchemaVersionWhereUniqueInput[] | GqlSchemaVersionWhereUniqueInput
  >;
  connect?: Maybe<
    GqlSchemaVersionWhereUniqueInput[] | GqlSchemaVersionWhereUniqueInput
  >;
  set?: Maybe<
    GqlSchemaVersionWhereUniqueInput[] | GqlSchemaVersionWhereUniqueInput
  >;
  disconnect?: Maybe<
    GqlSchemaVersionWhereUniqueInput[] | GqlSchemaVersionWhereUniqueInput
  >;
  update?: Maybe<
    | GqlSchemaVersionUpdateWithWhereUniqueWithoutSchemaInput[]
    | GqlSchemaVersionUpdateWithWhereUniqueWithoutSchemaInput
  >;
  upsert?: Maybe<
    | GqlSchemaVersionUpsertWithWhereUniqueWithoutSchemaInput[]
    | GqlSchemaVersionUpsertWithWhereUniqueWithoutSchemaInput
  >;
  deleteMany?: Maybe<
    GqlSchemaVersionScalarWhereInput[] | GqlSchemaVersionScalarWhereInput
  >;
  updateMany?: Maybe<
    | GqlSchemaVersionUpdateManyWithWhereNestedInput[]
    | GqlSchemaVersionUpdateManyWithWhereNestedInput
  >;
}

export interface GqlSchemaVersionUpdateWithWhereUniqueWithoutSchemaInput {
  where: GqlSchemaVersionWhereUniqueInput;
  data: GqlSchemaVersionUpdateWithoutSchemaDataInput;
}

export interface GqlSchemaVersionUpdateWithoutSchemaDataInput {
  number?: Maybe<Int>;
  introspectionQuery?: Maybe<Json>;
  endpointUrl?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface GqlSchemaVersionUpsertWithWhereUniqueWithoutSchemaInput {
  where: GqlSchemaVersionWhereUniqueInput;
  update: GqlSchemaVersionUpdateWithoutSchemaDataInput;
  create: GqlSchemaVersionCreateWithoutSchemaInput;
}

export interface GqlSchemaVersionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  endpointUrl?: Maybe<String>;
  endpointUrl_not?: Maybe<String>;
  endpointUrl_in?: Maybe<String[] | String>;
  endpointUrl_not_in?: Maybe<String[] | String>;
  endpointUrl_lt?: Maybe<String>;
  endpointUrl_lte?: Maybe<String>;
  endpointUrl_gt?: Maybe<String>;
  endpointUrl_gte?: Maybe<String>;
  endpointUrl_contains?: Maybe<String>;
  endpointUrl_not_contains?: Maybe<String>;
  endpointUrl_starts_with?: Maybe<String>;
  endpointUrl_not_starts_with?: Maybe<String>;
  endpointUrl_ends_with?: Maybe<String>;
  endpointUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    GqlSchemaVersionScalarWhereInput[] | GqlSchemaVersionScalarWhereInput
  >;
  OR?: Maybe<
    GqlSchemaVersionScalarWhereInput[] | GqlSchemaVersionScalarWhereInput
  >;
  NOT?: Maybe<
    GqlSchemaVersionScalarWhereInput[] | GqlSchemaVersionScalarWhereInput
  >;
}

export interface GqlSchemaVersionUpdateManyWithWhereNestedInput {
  where: GqlSchemaVersionScalarWhereInput;
  data: GqlSchemaVersionUpdateManyDataInput;
}

export interface GqlSchemaVersionUpdateManyDataInput {
  number?: Maybe<Int>;
  introspectionQuery?: Maybe<Json>;
  endpointUrl?: Maybe<String>;
}

export interface GqlSchemaUpsertWithWhereUniqueWithoutMembersInput {
  where: GqlSchemaWhereUniqueInput;
  update: GqlSchemaUpdateWithoutMembersDataInput;
  create: GqlSchemaCreateWithoutMembersInput;
}

export interface GqlSchemaScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  apiKey?: Maybe<String>;
  apiKey_not?: Maybe<String>;
  apiKey_in?: Maybe<String[] | String>;
  apiKey_not_in?: Maybe<String[] | String>;
  apiKey_lt?: Maybe<String>;
  apiKey_lte?: Maybe<String>;
  apiKey_gt?: Maybe<String>;
  apiKey_gte?: Maybe<String>;
  apiKey_contains?: Maybe<String>;
  apiKey_not_contains?: Maybe<String>;
  apiKey_starts_with?: Maybe<String>;
  apiKey_not_starts_with?: Maybe<String>;
  apiKey_ends_with?: Maybe<String>;
  apiKey_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GqlSchemaScalarWhereInput[] | GqlSchemaScalarWhereInput>;
  OR?: Maybe<GqlSchemaScalarWhereInput[] | GqlSchemaScalarWhereInput>;
  NOT?: Maybe<GqlSchemaScalarWhereInput[] | GqlSchemaScalarWhereInput>;
}

export interface GqlSchemaUpdateManyWithWhereNestedInput {
  where: GqlSchemaScalarWhereInput;
  data: GqlSchemaUpdateManyDataInput;
}

export interface GqlSchemaUpdateManyDataInput {
  name?: Maybe<String>;
  apiKey?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface GqlSchemaUpdateManyMutationInput {
  name?: Maybe<String>;
  apiKey?: Maybe<String>;
}

export interface GqlSchemaVersionUpdateInput {
  number?: Maybe<Int>;
  schema?: Maybe<GqlSchemaUpdateOneWithoutVersionsInput>;
  introspectionQuery?: Maybe<Json>;
  endpointUrl?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface GqlSchemaVersionUpdateManyMutationInput {
  number?: Maybe<Int>;
  introspectionQuery?: Maybe<Json>;
  endpointUrl?: Maybe<String>;
}

export interface UserUpdateInput {
  sub?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  profile?: Maybe<UserProfileUpdateOneInput>;
  schemas?: Maybe<GqlSchemaUpdateManyWithoutMembersInput>;
}

export interface UserUpdateManyMutationInput {
  sub?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
}

export interface UserProfileUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  fullName?: Maybe<String>;
  picture?: Maybe<String>;
}

export interface UserProfileUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  fullName?: Maybe<String>;
  picture?: Maybe<String>;
}

export interface GqlSchemaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GqlSchemaWhereInput>;
  AND?: Maybe<
    GqlSchemaSubscriptionWhereInput[] | GqlSchemaSubscriptionWhereInput
  >;
  OR?: Maybe<
    GqlSchemaSubscriptionWhereInput[] | GqlSchemaSubscriptionWhereInput
  >;
  NOT?: Maybe<
    GqlSchemaSubscriptionWhereInput[] | GqlSchemaSubscriptionWhereInput
  >;
}

export interface GqlSchemaVersionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GqlSchemaVersionWhereInput>;
  AND?: Maybe<
    | GqlSchemaVersionSubscriptionWhereInput[]
    | GqlSchemaVersionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | GqlSchemaVersionSubscriptionWhereInput[]
    | GqlSchemaVersionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | GqlSchemaVersionSubscriptionWhereInput[]
    | GqlSchemaVersionSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserProfileWhereInput>;
  AND?: Maybe<
    UserProfileSubscriptionWhereInput[] | UserProfileSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserProfileSubscriptionWhereInput[] | UserProfileSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserProfileSubscriptionWhereInput[] | UserProfileSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface GqlSchema {
  id: ID_Output;
  name: String;
  apiKey: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GqlSchemaPromise extends Promise<GqlSchema>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  latestVersion: <T = GqlSchemaVersionPromise>() => T;
  versions: <T = FragmentableArray<GqlSchemaVersion>>(args?: {
    where?: GqlSchemaVersionWhereInput;
    orderBy?: GqlSchemaVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  apiKey: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GqlSchemaSubscription
  extends Promise<AsyncIterator<GqlSchema>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  latestVersion: <T = GqlSchemaVersionSubscription>() => T;
  versions: <T = Promise<AsyncIterator<GqlSchemaVersionSubscription>>>(args?: {
    where?: GqlSchemaVersionWhereInput;
    orderBy?: GqlSchemaVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  apiKey: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GqlSchemaNullablePromise
  extends Promise<GqlSchema | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  latestVersion: <T = GqlSchemaVersionPromise>() => T;
  versions: <T = FragmentableArray<GqlSchemaVersion>>(args?: {
    where?: GqlSchemaVersionWhereInput;
    orderBy?: GqlSchemaVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  apiKey: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  sub: String;
  email: String;
  username: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  sub: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  profile: <T = UserProfilePromise>() => T;
  schemas: <T = FragmentableArray<GqlSchema>>(args?: {
    where?: GqlSchemaWhereInput;
    orderBy?: GqlSchemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sub: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  profile: <T = UserProfileSubscription>() => T;
  schemas: <T = Promise<AsyncIterator<GqlSchemaSubscription>>>(args?: {
    where?: GqlSchemaWhereInput;
    orderBy?: GqlSchemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sub: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  profile: <T = UserProfilePromise>() => T;
  schemas: <T = FragmentableArray<GqlSchema>>(args?: {
    where?: GqlSchemaWhereInput;
    orderBy?: GqlSchemaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserProfile {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  fullName?: String;
  picture?: String;
}

export interface UserProfilePromise extends Promise<UserProfile>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  fullName: () => Promise<String>;
  picture: () => Promise<String>;
}

export interface UserProfileSubscription
  extends Promise<AsyncIterator<UserProfile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
}

export interface UserProfileNullablePromise
  extends Promise<UserProfile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  fullName: () => Promise<String>;
  picture: () => Promise<String>;
}

export interface GqlSchemaVersion {
  id: ID_Output;
  number: Int;
  introspectionQuery?: Json;
  endpointUrl?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GqlSchemaVersionPromise
  extends Promise<GqlSchemaVersion>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  schema: <T = GqlSchemaPromise>() => T;
  introspectionQuery: () => Promise<Json>;
  endpointUrl: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GqlSchemaVersionSubscription
  extends Promise<AsyncIterator<GqlSchemaVersion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<Int>>;
  schema: <T = GqlSchemaSubscription>() => T;
  introspectionQuery: () => Promise<AsyncIterator<Json>>;
  endpointUrl: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GqlSchemaVersionNullablePromise
  extends Promise<GqlSchemaVersion | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  schema: <T = GqlSchemaPromise>() => T;
  introspectionQuery: () => Promise<Json>;
  endpointUrl: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GqlSchemaConnection {
  pageInfo: PageInfo;
  edges: GqlSchemaEdge[];
}

export interface GqlSchemaConnectionPromise
  extends Promise<GqlSchemaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GqlSchemaEdge>>() => T;
  aggregate: <T = AggregateGqlSchemaPromise>() => T;
}

export interface GqlSchemaConnectionSubscription
  extends Promise<AsyncIterator<GqlSchemaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GqlSchemaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGqlSchemaSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GqlSchemaEdge {
  node: GqlSchema;
  cursor: String;
}

export interface GqlSchemaEdgePromise
  extends Promise<GqlSchemaEdge>,
    Fragmentable {
  node: <T = GqlSchemaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GqlSchemaEdgeSubscription
  extends Promise<AsyncIterator<GqlSchemaEdge>>,
    Fragmentable {
  node: <T = GqlSchemaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGqlSchema {
  count: Int;
}

export interface AggregateGqlSchemaPromise
  extends Promise<AggregateGqlSchema>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGqlSchemaSubscription
  extends Promise<AsyncIterator<AggregateGqlSchema>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GqlSchemaVersionConnection {
  pageInfo: PageInfo;
  edges: GqlSchemaVersionEdge[];
}

export interface GqlSchemaVersionConnectionPromise
  extends Promise<GqlSchemaVersionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GqlSchemaVersionEdge>>() => T;
  aggregate: <T = AggregateGqlSchemaVersionPromise>() => T;
}

export interface GqlSchemaVersionConnectionSubscription
  extends Promise<AsyncIterator<GqlSchemaVersionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GqlSchemaVersionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGqlSchemaVersionSubscription>() => T;
}

export interface GqlSchemaVersionEdge {
  node: GqlSchemaVersion;
  cursor: String;
}

export interface GqlSchemaVersionEdgePromise
  extends Promise<GqlSchemaVersionEdge>,
    Fragmentable {
  node: <T = GqlSchemaVersionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GqlSchemaVersionEdgeSubscription
  extends Promise<AsyncIterator<GqlSchemaVersionEdge>>,
    Fragmentable {
  node: <T = GqlSchemaVersionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGqlSchemaVersion {
  count: Int;
}

export interface AggregateGqlSchemaVersionPromise
  extends Promise<AggregateGqlSchemaVersion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGqlSchemaVersionSubscription
  extends Promise<AsyncIterator<AggregateGqlSchemaVersion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserProfileConnection {
  pageInfo: PageInfo;
  edges: UserProfileEdge[];
}

export interface UserProfileConnectionPromise
  extends Promise<UserProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserProfileEdge>>() => T;
  aggregate: <T = AggregateUserProfilePromise>() => T;
}

export interface UserProfileConnectionSubscription
  extends Promise<AsyncIterator<UserProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserProfileSubscription>() => T;
}

export interface UserProfileEdge {
  node: UserProfile;
  cursor: String;
}

export interface UserProfileEdgePromise
  extends Promise<UserProfileEdge>,
    Fragmentable {
  node: <T = UserProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserProfileEdgeSubscription
  extends Promise<AsyncIterator<UserProfileEdge>>,
    Fragmentable {
  node: <T = UserProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserProfile {
  count: Int;
}

export interface AggregateUserProfilePromise
  extends Promise<AggregateUserProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserProfileSubscription
  extends Promise<AsyncIterator<AggregateUserProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GqlSchemaSubscriptionPayload {
  mutation: MutationType;
  node: GqlSchema;
  updatedFields: String[];
  previousValues: GqlSchemaPreviousValues;
}

export interface GqlSchemaSubscriptionPayloadPromise
  extends Promise<GqlSchemaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GqlSchemaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GqlSchemaPreviousValuesPromise>() => T;
}

export interface GqlSchemaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GqlSchemaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GqlSchemaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GqlSchemaPreviousValuesSubscription>() => T;
}

export interface GqlSchemaPreviousValues {
  id: ID_Output;
  name: String;
  apiKey: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GqlSchemaPreviousValuesPromise
  extends Promise<GqlSchemaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  apiKey: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GqlSchemaPreviousValuesSubscription
  extends Promise<AsyncIterator<GqlSchemaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  apiKey: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GqlSchemaVersionSubscriptionPayload {
  mutation: MutationType;
  node: GqlSchemaVersion;
  updatedFields: String[];
  previousValues: GqlSchemaVersionPreviousValues;
}

export interface GqlSchemaVersionSubscriptionPayloadPromise
  extends Promise<GqlSchemaVersionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GqlSchemaVersionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GqlSchemaVersionPreviousValuesPromise>() => T;
}

export interface GqlSchemaVersionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GqlSchemaVersionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GqlSchemaVersionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GqlSchemaVersionPreviousValuesSubscription>() => T;
}

export interface GqlSchemaVersionPreviousValues {
  id: ID_Output;
  number: Int;
  introspectionQuery?: Json;
  endpointUrl?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GqlSchemaVersionPreviousValuesPromise
  extends Promise<GqlSchemaVersionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  introspectionQuery: () => Promise<Json>;
  endpointUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GqlSchemaVersionPreviousValuesSubscription
  extends Promise<AsyncIterator<GqlSchemaVersionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<Int>>;
  introspectionQuery: () => Promise<AsyncIterator<Json>>;
  endpointUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  sub: String;
  email: String;
  username: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sub: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sub: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserProfileSubscriptionPayload {
  mutation: MutationType;
  node: UserProfile;
  updatedFields: String[];
  previousValues: UserProfilePreviousValues;
}

export interface UserProfileSubscriptionPayloadPromise
  extends Promise<UserProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserProfilePreviousValuesPromise>() => T;
}

export interface UserProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserProfilePreviousValuesSubscription>() => T;
}

export interface UserProfilePreviousValues {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  fullName?: String;
  picture?: String;
}

export interface UserProfilePreviousValuesPromise
  extends Promise<UserProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  fullName: () => Promise<String>;
  picture: () => Promise<String>;
}

export interface UserProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<UserProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Json = any;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserProfile",
    embedded: false
  },
  {
    name: "GqlSchema",
    embedded: false
  },
  {
    name: "GqlSchemaVersion",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
