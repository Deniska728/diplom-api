scalar JSON

type User {
  id: ID!
  email: String!
  username: String!
  profile: UserProfile
}

type UserProfile {
  firstName: String
  lastName: String
  fullName: String
  picture: String
}

type AuthPayload {
  token: String
  user: User
}

type Comment {
  id: ID!
  gqlType: GqlType!
  content: CommentContent!
  createdBy: User
  createdAt: String
}

type CommentContent {
  message: String!
}

type CommentSubscriptionResponse {
  mutation: MutationType
  comment: Comment
  previousValues: DeletedCommentResponse
}

type DeletedCommentResponse {
  id: ID!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Schema {
  id: ID!
  name: String!
  apiKey: String
  owner: User
  members: [User]!
  introspectionSchema: GqlIntrospectionSchema
  endpointUrl: String
}

type GqlIntrospectionSchema {
  id: ID!
  name: String! 
  types: [GqlType]!
  directives: [GqlDirective]! 
}

type GqlType {
  id: ID!
  kind: GqlTypeKind!
  name: String
  description: String
  fields: [GqlField!] 
  interfaces: [GqlBaseType!] 
  possibleTypes: [GqlBaseType!]
  enumValues: [GqlEnumValue!]
  inputFields: [GqlInputValue!] 
}

type GqlBaseType {
  kind: GqlTypeKind!
  name: String!
}

type GqlField {
  id: ID!
  name: String!
  kinds: [GqlTypeKind]!
  description: String
  args: [GqlInputValue!]!
  typeName: String!
  isDeprecated: Boolean!
  deprecationReason: String
}

type GqlInputValue {
  id: ID!
  name: String!
  kinds: [GqlTypeKind]!
  description: String
  typeName: String!
  defaultValue: String
}

type GqlEnumValue {
  id: ID!
  name: String!
  description: String
  isDeprecated: Boolean!
  deprecationReason: String
}

type GqlDirective {
  id: ID!
  name: String!
  description: String
  locations: [GqlDirectiveLocation!]!
  args: [GqlInputValue!]!
}

enum GqlTypeKind {
  SCALAR
  OBJECT
  INTERFACE
  UNION
  ENUM
  INPUT_OBJECT
  LIST
  NON_NULL
}

enum GqlDirectiveLocation {
  QUERY
  MUTATION
  SUBSCRIPTION
  FIELD
  FRAGMENT_DEFINITION
  FRAGMENT_SPREAD
  INLINE_FRAGMENT
  SCHEMA
  SCALAR
  OBJECT
  FIELD_DEFINITION
  ARGUMENT_DEFINITION
  INTERFACE
  UNION
  ENUM
  ENUM_VALUE
  INPUT_OBJECT
  INPUT_FIELD_DEFINITION
}

type Query {
  me: User
  schema(
    id: ID
    apiKey: String
  ): Schema
  schemas: [Schema]
  comments(
    schemaId: ID!
    id: ID!
  ): [Comment]!
  info: String!
}

type Mutation {
  signUp(email: String!, password: String!, username: String!): AuthPayload
  signIn(email: String!, password: String!): AuthPayload
  createSchema(
    endpoint: String!
    apiKeyName: String
    apiKey: String
  ): Schema
  deleteSchema(
    id: ID!
  ): Schema
  addSchemaMember(
    schemaId: ID!
    email: String!
  ): [User]
  removeSchemaMember(
    schemaId: ID!
    userId: ID!
  ): ID
  createComment(
    schemaId: ID!
    gqlTypeId: ID
    gqlFieldId: ID
    content: String!
  ): Comment!
  deleteComment(
    commentId: ID!
  ): DeletedCommentResponse!
}

type Subscription {
  comment(
    schemaId: ID!
    id: ID!
  ): CommentSubscriptionResponse
}
